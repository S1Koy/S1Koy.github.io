<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode 2028. 找出缺失的观测数据</title>
    <url>/2022/03/27/LeetCode-2028-%E6%89%BE%E5%87%BA%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="2028-找出缺失的观测数据"><a href="#2028-找出缺失的观测数据" class="headerlink" title="2028. 找出缺失的观测数据"></a><a href="https://leetcode-cn.com/problems/find-missing-observations/">2028. 找出缺失的观测数据</a></h4><p>思路：首先统计已有的总和，然后算出剩余需要的<code>res</code>，如果<script type="math/tex">\ res<n || res>6*n\</script>就不可能了，然后看是否<code>res</code>能够均分到<code>n</code>个位置，如果能够最好，不能的话肯定有剩余<code>mod</code>，而且<code>mod</code>肯定小于<code>n</code>，也就是把余数每个位置放一个的策略是正确的。可以对余数再<code>for</code>一遍，也可以在放的时候直接搞定。</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] missingRolls(<span class="type">int</span>[] rolls, <span class="type">int</span> mean, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: rolls) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> rolls.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> (n + m) * mean - sum;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; n || res &gt; n * <span class="number">6</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans[i] = res % n == <span class="number">0</span> ? res / n : res-- / n + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 693. 交替位二进制数</title>
    <url>/2022/03/28/LeetCode-693-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="693-交替位二进制数"><a href="#693-交替位二进制数" class="headerlink" title="693. 交替位二进制数"></a><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693. 交替位二进制数</a></h4><p>思路一：直接模拟取余，然后判断是否存在连续的<code>0</code>或<code>1</code>。</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == mod) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            mod = n % <span class="number">2</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>思路二：考虑二进制。一开始的思路是直接搞出来最大的奇<code>10101010……1</code>串和偶<code>10101010……0</code>串，然后再与<code>n</code>直接进行操作不过好像有点麻烦，考虑了多种方式都无法实现，然后能搞出来的方法就有点麻烦了。索性看了题解：首先<code>n</code>右移一位，然后再与本身异或操作，如果是交替的话，就是全<code>1</code>串了，然后只需要判断是否全<code>1</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> n ^ (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ((x &amp; (x + <span class="number">1</span>)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 954. 二倍数对数组</title>
    <url>/2022/04/05/LeetCode-954-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>思路：一开始想的是肯定要排序，从小到大，然后遍历每个数字的一半在不在哈希表里，哈希表维护每个数出现的次数，然后每次能够找到自己的一半的话就对应相消，注意的<script type="math/tex">0</script>时候，能够相消的条件是当前<script type="math/tex">0</script>的个数<script type="math/tex">cnt</script>要满足：<script type="math/tex">cnt>1</script>，因为<script type="math/tex">0</script>的一半是它自身，其他数字就存在即可。这样如果能够成对的话，成功相消的次数应该是数组长度的一半。<code>代码一</code></p>
<span id="more"></span>
<p>然后看了官方题解思路：将<script type="math/tex">0</script>进行特判，因为必须是成对的。然后排序不是简单的从小到大排序，是按照绝对值的大小排序，因为设<script type="math/tex">x</script></p>
<p>为绝对值最小的数，没有比它更小的数，所以只能找成对的<script type="math/tex">2*x</script>进行配对，然后将<script type="math/tex">2*x</script>的个数减掉相应值即可，如果出现不够减，就不能满足成对的要求。<code>代码二</code></p>
<p>然后看了宫水三叶的思路：以上思路都是要进行排序，复杂度主要是排序带来的，这里比较巧妙的是可以利用<script type="math/tex">x</script>只可能与<script type="math/tex">\frac{x}2</script>或者<script type="math/tex">2*x</script>组成对数来建图，因为如果排除<script type="math/tex">0</script>的可能，就不会存在环路，因为可以跑拓扑序来验证是否可行。</p>
<p>首先对数组进行数量统计，然后去重（跳过<script type="math/tex">0</script>)，因为会产生自环。然后对出现的值<script type="math/tex">x</script>进行讨论：</p>
<ul>
<li><script type="math/tex">x</script>为奇数：只能作为数对中绝对值较小的数字，即<script type="math/tex">x</script>的入度为<script type="math/tex">0</script>，加入队列。</li>
<li><script type="math/tex">x</script>为偶数：首先入度<script type="math/tex">in[x]=cnt[\frac{x}2]</script>，当<script type="math/tex">in[x]=0</script>，说明只能作为数对中绝对值较小的数字，入队。</li>
</ul>
<p>假设当前出队值为<script type="math/tex">t</script>，要消耗<script type="math/tex">cnt[t]</script>个<script type="math/tex">2*t</script>与其构成数对，则<script type="math/tex">cnt[2*t]-=cnt[t]</script>，同时<script type="math/tex">in[2*t]-=cnt[t]</script>，如果<script type="math/tex">in[2*t]=0</script>且<script type="math/tex">cnt[2*t]>0</script>，入队，由于减少了<script type="math/tex">2*t</script>的数量，要同时更新<script type="math/tex">in[4*t]</script>，当<script type="math/tex">in[4*t]=0</script>且<script type="math/tex">cnt[4*t]>0</script>，需要将<script type="math/tex">4*t</script>入队。<code>代码三</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(arr[i])) &#123;</span><br><span class="line">                map.put(arr[i], map.get(arr[i]) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(arr[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.get(arr[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(arr[i] / <span class="number">2</span>)) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> arr[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (map.get(arr[i] / <span class="number">2</span>) &gt; limit) &#123;</span><br><span class="line">                        map.put((arr[i] / <span class="number">2</span>), map.get(arr[i] / <span class="number">2</span>) - <span class="number">1</span>);</span><br><span class="line">                        map.put(arr[i], map.get(arr[i]) - <span class="number">1</span>);</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len / <span class="number">2</span> != ans) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            cnt.put(arr[i], cnt.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> cnt.getOrDefault(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (zero % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            list.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list, (a, b) -&gt; Math.abs(a) - Math.abs(b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.get(val);</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(<span class="number">2</span> * val, <span class="number">0</span>) &lt; num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cnt.put(<span class="number">2</span> * val, cnt.getOrDefault(<span class="number">2</span> * val, <span class="number">0</span>) - num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; in = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            cnt.put(arr[i], cnt.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> cnt.getOrDefault(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (zero % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.getOrDefault(x / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">                in.put(x, num);</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>) queue.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.get(x);</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(<span class="number">2</span> * x, <span class="number">0</span>) &lt; num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cnt.put(<span class="number">2</span> * x, cnt.get(<span class="number">2</span> * x) - num);</span><br><span class="line">            in.put(<span class="number">2</span> * x, in.get(<span class="number">2</span> * x) - num);</span><br><span class="line">            <span class="keyword">if</span> (in.get(<span class="number">2</span> * x) == <span class="number">0</span> &amp;&amp; cnt.get(<span class="number">2</span> * x) &gt; <span class="number">0</span>) queue.add(<span class="number">2</span> * x);</span><br><span class="line">            in.put(<span class="number">4</span> * x, in.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) - num);</span><br><span class="line">            <span class="keyword">if</span> (in.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) == <span class="number">0</span> &amp;&amp; cnt.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) &gt; <span class="number">0</span>) queue.add(<span class="number">4</span> * x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>排序</tag>
        <tag>拓扑</tag>
      </tags>
  </entry>
  <entry>
    <title>二分总结</title>
    <url>/2022/03/29/%E4%BA%8C%E5%88%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>算法总结</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
</search>
