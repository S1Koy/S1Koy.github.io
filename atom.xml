<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奥印安鱼</title>
  
  
  <link href="https://s1koy.github.io/atom.xml" rel="self"/>
  
  <link href="https://s1koy.github.io/"/>
  <updated>2022-05-18T15:07:10.380Z</updated>
  <id>https://s1koy.github.io/</id>
  
  <author>
    <name>奥印安鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode 668. 乘法表中第k小的数</title>
    <link href="https://s1koy.github.io/2022/05/18/LeetCode-668-%E4%B9%98%E6%B3%95%E8%A1%A8%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>https://s1koy.github.io/2022/05/18/LeetCode-668-%E4%B9%98%E6%B3%95%E8%A1%A8%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E6%95%B0/</id>
    <published>2022-05-18T14:41:47.000Z</published>
    <updated>2022-05-18T15:07:10.380Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="668-乘法表中第k小的数"><a href="#668-乘法表中第k小的数" class="headerlink" title="668. 乘法表中第k小的数"></a><a href="https://leetcode.cn/problems/kth-smallest-number-in-multiplication-table/">668. 乘法表中第k小的数</a></h4><p>思路：第一眼第<script type="math/tex">k</script>大就是直接就说主席树，然后发现数据范围很大，然后在考虑看成树的样子，虽然不可行，不过这样是计算正解的的一种方法，最后就想通过筛数来搞，发现不可能，直接看题解吧……</p><p>正解：数据范围太大，直接二分答案，设第<script type="math/tex">k</script>大的数为<script type="math/tex">x</script>，则$\le x$的数字个数不超过<script type="math/tex">k</script>个，因为每一行的数都是该行第一个数的递增倍数，所以当前行<script type="math/tex">\le x</script>的个数为<script type="math/tex">\lfloor \frac{x}{i} \rfloor</script>，差点以为自己的二分有问题，发现求得就是左边界，搞错了，可能是饿的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthNumber</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = m * n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (r - l) / <span class="number">2</span> + l;</span><br><span class="line">            <span class="keyword">if</span> (check(m, n, mid, k)) &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> x, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> x / n * n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x / n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            cnt += x / i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="二分" scheme="https://s1koy.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 22. 括号生成</title>
    <link href="https://s1koy.github.io/2022/05/13/LeetCode-22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>https://s1koy.github.io/2022/05/13/LeetCode-22-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</id>
    <published>2022-05-13T07:06:43.000Z</published>
    <updated>2022-05-13T07:41:43.531Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>数据范围最多<script type="math/tex">16</script>个位置，每个位置两种选择，直接<script type="math/tex">DFS</script>搜索即可，这里将<strong>（</strong> 看成<script type="math/tex">1</script> , <strong>)</strong> 看成<script type="math/tex">-1</script> ，然后就可以剪枝，不需要最后再检查序列是否合法。<code>代码一</code></p><p>以上方法，也可以使用遍历的方式来模拟出来，每次只保留合法的序列即可，同样使用上述规则来维护合法序列。<code>代码二</code></p><p>动态规划：考虑已知<script type="math/tex">n-1</script>对括号的所有合法序列，那么对于第<script type="math/tex">n</script>对括号来说，相当于<strong>(A)B</strong>，即将<script type="math/tex">n-1</script>对括号分成<strong>A和B</strong>，其中<script type="math/tex">A+B=n-1</script>，所以枚举<strong>A和B</strong>的所有可能即可，不会重复。</p><p>定义：<script type="math/tex">dp[i]</script>表示括号对数为<script type="math/tex">i</script>的所有合法序列。</p><p>转移方程：<script type="math/tex">\sum_{i=2}^n\sum_{j=0}^{i-1} dp[i]='(' + dp[j] + ')' + dp[i - 1 -j]</script>，<strong>注意：</strong>这里的<script type="math/tex">dp</script>要枚举其所有序列</p><p>答案为<script type="math/tex">dp[n]</script>，<code>代码三</code></p><span id="more"></span><ul><li>n = 0 : “”</li><li>n = 1: “()”</li><li>n = 2:  (0)1，(1)0  即 “()()”，”(())”</li><li>n = 3: (0)2，(1)1，(2)0 即 “()()()”，”()(())”，”(())()”，”(()())”，”((()))”  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">        sb.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> idx, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span> || sum &gt; n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (idx == <span class="number">2</span> * n - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">        dfs(idx + <span class="number">1</span>, sum + <span class="number">1</span>);</span><br><span class="line">        sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">        sb.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">        dfs(idx + <span class="number">1</span>, sum - <span class="number">1</span>);</span><br><span class="line">        sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        map.put(<span class="string">&quot;(&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">2</span> * n; i++) &#123;</span><br><span class="line">            Map&lt;String, Integer&gt; change = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">2</span> * n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (val == <span class="number">1</span>) ans.add(s + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (val &lt; <span class="number">0</span> || val &gt; n) <span class="keyword">continue</span>;</span><br><span class="line">                    change.put(s + <span class="string">&quot;(&quot;</span>, val + <span class="number">1</span>);</span><br><span class="line">                    change.put(s + <span class="string">&quot;)&quot;</span>, val - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map = change;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;String&gt;[] dp = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) dp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dp[<span class="number">0</span>].add(<span class="string">&quot;&quot;</span>); dp[<span class="number">1</span>].add(<span class="string">&quot;()&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                List&lt;String&gt; list1 = dp[j];</span><br><span class="line">                List&lt;String&gt; list2 = dp[i - j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span> (String k1 : list1) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String k2 : list2) &#123;</span><br><span class="line">                        dp[i].add(<span class="string">&quot;(&quot;</span> + k1 + <span class="string">&quot;)&quot;</span> + k2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据范围最多&lt;script type=&quot;math/tex&quot;&gt;16&lt;/script&gt;个位置，每个位置两种选择，直接&lt;script type=&quot;math/tex&quot;&gt;DFS&lt;/script&gt;搜索即可，这里将&lt;strong&gt;（&lt;/strong&gt; 看成&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; , &lt;strong&gt;)&lt;/strong&gt; 看成&lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt; ，然后就可以剪枝，不需要最后再检查序列是否合法。&lt;code&gt;代码一&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以上方法，也可以使用遍历的方式来模拟出来，每次只保留合法的序列即可，同样使用上述规则来维护合法序列。&lt;code&gt;代码二&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;动态规划：考虑已知&lt;script type=&quot;math/tex&quot;&gt;n-1&lt;/script&gt;对括号的所有合法序列，那么对于第&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;对括号来说，相当于&lt;strong&gt;(A)B&lt;/strong&gt;，即将&lt;script type=&quot;math/tex&quot;&gt;n-1&lt;/script&gt;对括号分成&lt;strong&gt;A和B&lt;/strong&gt;，其中&lt;script type=&quot;math/tex&quot;&gt;A+B=n-1&lt;/script&gt;，所以枚举&lt;strong&gt;A和B&lt;/strong&gt;的所有可能即可，不会重复。&lt;/p&gt;
&lt;p&gt;定义：&lt;script type=&quot;math/tex&quot;&gt;dp[i]&lt;/script&gt;表示括号对数为&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;的所有合法序列。&lt;/p&gt;
&lt;p&gt;转移方程：&lt;script type=&quot;math/tex&quot;&gt;\sum_{i=2}^n\sum_{j=0}^{i-1} dp[i]=&#39;(&#39; + dp[j] + &#39;)&#39; + dp[i - 1 -j]&lt;/script&gt;，&lt;strong&gt;注意：&lt;/strong&gt;这里的&lt;script type=&quot;math/tex&quot;&gt;dp&lt;/script&gt;要枚举其所有序列&lt;/p&gt;
&lt;p&gt;答案为&lt;script type=&quot;math/tex&quot;&gt;dp[n]&lt;/script&gt;，&lt;code&gt;代码三&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="DP" scheme="https://s1koy.github.io/tags/DP/"/>
    
    <category term="DFS" scheme="https://s1koy.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 19. 删除链表的倒数第 N 个结点</title>
    <link href="https://s1koy.github.io/2022/05/11/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>https://s1koy.github.io/2022/05/11/LeetCode-19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</id>
    <published>2022-05-11T14:53:26.000Z</published>
    <updated>2022-05-13T07:08:33.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h4><p>思路：遍历一遍拿到长度，然后删除倒数第<script type="math/tex">n</script>个，判断是否是边界即可。<code>代码一</code></p><p>双指针做法：首先让<script type="math/tex">r</script>指针先走<script type="math/tex">n</script>个节点，然后<script type="math/tex">l</script>和<script type="math/tex">r</script>指针一起移动，直到<script type="math/tex">r</script>走到末尾，然后删除<script type="math/tex">r.next</script>。这里可以设置假节点，便于编码。<code>代码二</code></p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码一</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// public static class ListNode &#123;</span></span><br><span class="line"><span class="comment">//     int val;</span></span><br><span class="line"><span class="comment">//     ListNode next;</span></span><br><span class="line"><span class="comment">//     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment">//     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment">//     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">ListNode</span>(p.val, p.next));</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            list.get(i).next = list.get(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == len) &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            list.remove(len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                list.get(len - <span class="number">2</span>).next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">preNode</span> <span class="operator">=</span> list.get(len - n - <span class="number">1</span>);</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">sufNode</span> <span class="operator">=</span> list.get(len - n + <span class="number">1</span>);</span><br><span class="line">            preNode.next = sufNode;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt++ &lt; n) &#123;</span><br><span class="line">            r = r.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="keyword">while</span> (r.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            r = r.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = p.next.next;</span><br><span class="line">        <span class="keyword">return</span> l.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;19-删除链表的倒数第-N-个结点&quot;&gt;&lt;a href=&quot;#19-删除链表的倒数第-N-个结点&quot; class=&quot;headerlink&quot; title=&quot;19. 删除链表的倒数第 N 个结点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-nth-node-from-end-of-list/&quot;&gt;19. 删除链表的倒数第 N 个结点&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;思路：遍历一遍拿到长度，然后删除倒数第&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个，判断是否是边界即可。&lt;code&gt;代码一&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;双指针做法：首先让&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;指针先走&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个节点，然后&lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt;和&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;指针一起移动，直到&lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;走到末尾，然后删除&lt;script type=&quot;math/tex&quot;&gt;r.next&lt;/script&gt;。这里可以设置假节点，便于编码。&lt;code&gt;代码二&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="双指针" scheme="https://s1koy.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 954. 二倍数对数组</title>
    <link href="https://s1koy.github.io/2022/04/05/LeetCode-954-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/"/>
    <id>https://s1koy.github.io/2022/04/05/LeetCode-954-%E4%BA%8C%E5%80%8D%E6%95%B0%E5%AF%B9%E6%95%B0%E7%BB%84/</id>
    <published>2022-04-05T14:26:46.000Z</published>
    <updated>2022-04-07T02:20:09.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>思路：一开始想的是肯定要排序，从小到大，然后遍历每个数字的一半在不在哈希表里，哈希表维护每个数出现的次数，然后每次能够找到自己的一半的话就对应相消，注意的<script type="math/tex">0</script>时候，能够相消的条件是当前<script type="math/tex">0</script>的个数<script type="math/tex">cnt</script>要满足：<script type="math/tex">cnt>1</script>，因为<script type="math/tex">0</script>的一半是它自身，其他数字就存在即可。这样如果能够成对的话，成功相消的次数应该是数组长度的一半。<code>代码一</code></p><span id="more"></span><p>然后看了官方题解思路：将<script type="math/tex">0</script>进行特判，因为必须是成对的。然后排序不是简单的从小到大排序，是按照绝对值的大小排序，因为设<script type="math/tex">x</script>为绝对值最小的数，没有比它更小的数，所以只能找成对的<script type="math/tex">2*x</script>进行配对，然后将<script type="math/tex">2*x</script>的个数减掉相应值即可，如果出现不够减，就不能满足成对的要求。<code>代码二</code></p><p>然后看了宫水三叶的思路：以上思路都是要进行排序，复杂度主要是排序带来的，这里比较巧妙的是可以利用<script type="math/tex">x</script>只可能与<script type="math/tex">\frac{x}2</script>或者<script type="math/tex">2*x</script>组成对数来建图，因为如果排除<script type="math/tex">0</script>的可能，就不会存在环路，因为可以跑拓扑序来验证是否可行。</p><p>首先对数组进行数量统计，然后去重（跳过<script type="math/tex">0</script>)，因为会产生自环。然后对出现的值<script type="math/tex">x</script>进行讨论：</p><ul><li><script type="math/tex">x</script>为奇数：只能作为数对中绝对值较小的数字，即<script type="math/tex">x</script>的入度为<script type="math/tex">0</script>，加入队列。</li><li><script type="math/tex">x</script>为偶数：首先入度<script type="math/tex">in[x]=cnt[\frac{x}2]</script>，当<script type="math/tex">in[x]=0</script>，说明只能作为数对中绝对值较小的数字，入队。</li></ul><p>假设当前出队值为<script type="math/tex">t</script>，要消耗<script type="math/tex">cnt[t]</script>个<script type="math/tex">2*t</script>与其构成数对，则<script type="math/tex">cnt[2*t]-=cnt[t]</script>，同时<script type="math/tex">in[2*t]-=cnt[t]</script>，如果<script type="math/tex">in[2*t]=0</script>且<script type="math/tex">cnt[2*t]>0</script>，入队，由于减少了<script type="math/tex">2*t</script>的数量，要同时更新<script type="math/tex">in[4*t]</script>，当<script type="math/tex">in[4*t]=0</script>且<script type="math/tex">cnt[4*t]>0</script>，需要将<script type="math/tex">4*t</script>入队。<code>代码三</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码一</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(arr[i])) &#123;</span><br><span class="line">                map.put(arr[i], map.get(arr[i]) + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(arr[i], <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((arr[i] &amp; <span class="number">1</span>) == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.get(arr[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(arr[i] / <span class="number">2</span>)) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> arr[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (map.get(arr[i] / <span class="number">2</span>) &gt; limit) &#123;</span><br><span class="line">                        map.put((arr[i] / <span class="number">2</span>), map.get(arr[i] / <span class="number">2</span>) - <span class="number">1</span>);</span><br><span class="line">                        map.put(arr[i], map.get(arr[i]) - <span class="number">1</span>);</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len / <span class="number">2</span> != ans) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码二</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            cnt.put(arr[i], cnt.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> cnt.getOrDefault(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (zero % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            list.add(x);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(list, (a, b) -&gt; Math.abs(a) - Math.abs(b));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.get(val);</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(<span class="number">2</span> * val, <span class="number">0</span>) &lt; num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cnt.put(<span class="number">2</span> * val, cnt.getOrDefault(<span class="number">2</span> * val, <span class="number">0</span>) - num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码三</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canReorderDoubled</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; cnt = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Integer, Integer&gt; in = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            cnt.put(arr[i], cnt.getOrDefault(arr[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zero</span> <span class="operator">=</span> cnt.getOrDefault(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (zero % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x : cnt.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.getOrDefault(x / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">                in.put(x, num);</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>) queue.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> cnt.get(x);</span><br><span class="line">            <span class="keyword">if</span> (cnt.getOrDefault(<span class="number">2</span> * x, <span class="number">0</span>) &lt; num) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            cnt.put(<span class="number">2</span> * x, cnt.get(<span class="number">2</span> * x) - num);</span><br><span class="line">            in.put(<span class="number">2</span> * x, in.get(<span class="number">2</span> * x) - num);</span><br><span class="line">            <span class="keyword">if</span> (in.get(<span class="number">2</span> * x) == <span class="number">0</span> &amp;&amp; cnt.get(<span class="number">2</span> * x) &gt; <span class="number">0</span>) queue.add(<span class="number">2</span> * x);</span><br><span class="line">            in.put(<span class="number">4</span> * x, in.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) - num);</span><br><span class="line">            <span class="keyword">if</span> (in.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) == <span class="number">0</span> &amp;&amp; cnt.getOrDefault(<span class="number">4</span> * x, <span class="number">0</span>) &gt; <span class="number">0</span>) queue.add(<span class="number">4</span> * x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;思路：一开始想的是肯定要排序，从小到大，然后遍历每个数字的一半在不在哈希表里，哈希表维护每个数出现的次数，然后每次能够找到自己的一半的话就对应相消，注意的&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;时候，能够相消的条件是当前&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;的个数&lt;script type=&quot;math/tex&quot;&gt;cnt&lt;/script&gt;要满足：&lt;script type=&quot;math/tex&quot;&gt;cnt&gt;1&lt;/script&gt;，因为&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;的一半是它自身，其他数字就存在即可。这样如果能够成对的话，成功相消的次数应该是数组长度的一半。&lt;code&gt;代码一&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="哈希表" scheme="https://s1koy.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    <category term="排序" scheme="https://s1koy.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="拓扑" scheme="https://s1koy.github.io/tags/%E6%8B%93%E6%89%91/"/>
    
  </entry>
  
  <entry>
    <title>二分总结</title>
    <link href="https://s1koy.github.io/2022/03/29/%E4%BA%8C%E5%88%86%E6%80%BB%E7%BB%93/"/>
    <id>https://s1koy.github.io/2022/03/29/%E4%BA%8C%E5%88%86%E6%80%BB%E7%BB%93/</id>
    <published>2022-03-29T14:58:43.000Z</published>
    <updated>2022-03-29T16:11:26.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="算法总结" scheme="https://s1koy.github.io/categories/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="二分" scheme="https://s1koy.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 693. 交替位二进制数</title>
    <link href="https://s1koy.github.io/2022/03/28/LeetCode-693-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/"/>
    <id>https://s1koy.github.io/2022/03/28/LeetCode-693-%E4%BA%A4%E6%9B%BF%E4%BD%8D%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0/</id>
    <published>2022-03-28T12:19:21.000Z</published>
    <updated>2022-04-07T02:28:41.359Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="693-交替位二进制数"><a href="#693-交替位二进制数" class="headerlink" title="693. 交替位二进制数"></a><a href="https://leetcode-cn.com/problems/binary-number-with-alternating-bits/">693. 交替位二进制数</a></h4><p>思路一：直接模拟取余，然后判断是否存在连续的<script type="math/tex">0</script>或<script type="math/tex">1</script>。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == mod) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            mod = n % <span class="number">2</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路二：考虑二进制。一开始的思路是直接搞出来最大的奇<script type="math/tex">10101010……1</script>串和偶<script type="math/tex">10101010……0</script>串，然后再与<script type="math/tex">n</script>直接进行操作不过好像有点麻烦，考虑了多种方式都无法实现，然后能搞出来的方法就有点麻烦了。索性看了题解：首先<script type="math/tex">n</script>右移一位，然后再与本身异或操作，如果是交替的话，就是全<script type="math/tex">1</script>串了，然后只需要判断是否全<script type="math/tex">1</script>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasAlternatingBits</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> n ^ (n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> ((x &amp; (x + <span class="number">1</span>)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;693-交替位二进制数&quot;&gt;&lt;a href=&quot;#693-交替位二进制数&quot; class=&quot;headerlink&quot; title=&quot;693. 交替位二进制数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-number-with-alternating-bits/&quot;&gt;693. 交替位二进制数&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;思路一：直接模拟取余，然后判断是否存在连续的&lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt;或&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="二进制" scheme="https://s1koy.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 2028. 找出缺失的观测数据</title>
    <link href="https://s1koy.github.io/2022/03/27/LeetCode-2028-%E6%89%BE%E5%87%BA%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE/"/>
    <id>https://s1koy.github.io/2022/03/27/LeetCode-2028-%E6%89%BE%E5%87%BA%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%82%E6%B5%8B%E6%95%B0%E6%8D%AE/</id>
    <published>2022-03-27T15:40:30.000Z</published>
    <updated>2022-04-07T02:30:27.800Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="2028-找出缺失的观测数据"><a href="#2028-找出缺失的观测数据" class="headerlink" title="2028. 找出缺失的观测数据"></a><a href="https://leetcode-cn.com/problems/find-missing-observations/">2028. 找出缺失的观测数据</a></h4><p>思路：首先统计已有的总和，然后算出剩余需要的<script type="math/tex">res</script>，如果<script type="math/tex">\ res<n || res>6*n\</script>就不可能了，然后看是否<script type="math/tex">res</script>能够均分到<script type="math/tex">n</script>个位置，如果能够最好，不能的话肯定有剩余<script type="math/tex">mod</script>，而且<script type="math/tex">mod</script>肯定小于<script type="math/tex">n</script>，也就是把余数每个位置放一个的策略是正确的。可以对余数再遍历一遍，也可以在放的时候直接搞定。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] missingRolls(<span class="type">int</span>[] rolls, <span class="type">int</span> mean, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x: rolls) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> rolls.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> (n + m) * mean - sum;</span><br><span class="line">        <span class="keyword">if</span> (res &lt; n || res &gt; n * <span class="number">6</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans[i] = res % n == <span class="number">0</span> ? res / n : res-- / n + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;2028-找出缺失的观测数据&quot;&gt;&lt;a href=&quot;#2028-找出缺失的观测数据&quot; class=&quot;headerlink&quot; title=&quot;2028. 找出缺失的观测数据&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/find-missing-observations/&quot;&gt;2028. 找出缺失的观测数据&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;思路：首先统计已有的总和，然后算出剩余需要的&lt;script type=&quot;math/tex&quot;&gt;res&lt;/script&gt;，如果&lt;script type=&quot;math/tex&quot;&gt;\ res&lt;n || res&gt;6*n\&lt;/script&gt;就不可能了，然后看是否&lt;script type=&quot;math/tex&quot;&gt;res&lt;/script&gt;能够均分到&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;个位置，如果能够最好，不能的话肯定有剩余&lt;script type=&quot;math/tex&quot;&gt;mod&lt;/script&gt;，而且&lt;script type=&quot;math/tex&quot;&gt;mod&lt;/script&gt;肯定小于&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;，也就是把余数每个位置放一个的策略是正确的。可以对余数再遍历一遍，也可以在放的时候直接搞定。&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://s1koy.github.io/categories/LeetCode/"/>
    
    
    <category term="构造" scheme="https://s1koy.github.io/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
</feed>
